# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-27 18:04
from __future__ import unicode_literals

import apiweb.apps.alumni.managers
import apiweb.apps.alumni.models
import apiweb.apps.alumni.storage
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import jsonfield.fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alumnus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('show_person', models.BooleanField(default=True, verbose_name='alumnus visible on website')),
                ('passed_away', models.BooleanField(default=False, help_text='If selected an asterisk will appear by the name of this alumnus on the website.', verbose_name='Deceased')),
                ('initials', models.CharField(blank=True, max_length=40, verbose_name='initials')),
                ('first_name', models.CharField(blank=True, max_length=40, verbose_name='first name')),
                ('nickname', models.CharField(blank=True, max_length=40, verbose_name='nickname')),
                ('middle_names', models.CharField(blank=True, max_length=120, verbose_name='middle names')),
                ('prefix', models.CharField(blank=True, max_length=40, verbose_name='prefix')),
                ('last_name', models.CharField(max_length=40, verbose_name='last name')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (3, 'Other'), (4, 'Prefer not to say')], null=True, verbose_name='gender')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('nationality', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='nationality')),
                ('place_of_birth', models.CharField(blank=True, max_length=40, verbose_name='place of birth')),
                ('student_id', models.CharField(blank=True, max_length=10, verbose_name='student_id')),
                ('mugshot', models.ImageField(blank=True, null=True, storage=apiweb.apps.alumni.storage.OverwriteStorage(), upload_to=apiweb.apps.alumni.models.get_mugshot_location, verbose_name='mugshot')),
                ('biography', tinymce.models.HTMLField(blank=True, default='', verbose_name='biography')),
                ('slug', models.SlugField(unique=True, verbose_name='slug')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email')),
                ('home_phone', models.CharField(blank=True, max_length=40, verbose_name='home telephone')),
                ('mobile', models.CharField(blank=True, max_length=40, verbose_name='mobile')),
                ('homepage', models.URLField(blank=True, null=True, verbose_name='homepage')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='facebook')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='twitter')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='linkedin')),
                ('last_checked', models.DateTimeField(blank=True, help_text='Update this field if you know that the contact information is up-to-date.', null=True, verbose_name='Date Last Checked')),
                ('address', models.CharField(blank=True, max_length=40, verbose_name='address')),
                ('streetname', models.CharField(blank=True, max_length=40, verbose_name='streetname')),
                ('streetnumber', models.CharField(blank=True, max_length=40, verbose_name='streetnumber')),
                ('zipcode', models.CharField(blank=True, max_length=40, verbose_name='zipcode')),
                ('city', models.CharField(blank=True, max_length=40, verbose_name='city')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, verbose_name='country')),
                ('specification', models.CharField(blank=True, help_text='Type of grant, or other indicator of funding', max_length=255)),
                ('office', models.CharField(blank=True, max_length=40, verbose_name='office')),
                ('work_phone', models.CharField(blank=True, max_length=40, verbose_name='work telephone')),
                ('ads_name', models.CharField(blank=True, max_length=40, verbose_name='ads name')),
                ('comments', models.TextField(blank=True, verbose_name='comments')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Last Changed')),
                ('show_biography', models.BooleanField(default=False, verbose_name='Show biography on personal page')),
                ('show_facebook', models.BooleanField(default=False, verbose_name='Show facebook on personal page')),
                ('show_linkedin', models.BooleanField(default=False, verbose_name='Show linkedin on personal page')),
                ('show_twitter', models.BooleanField(default=False, verbose_name='Show twitter on personal page')),
                ('show_email', models.BooleanField(default=False, verbose_name='Show email on personal page')),
                ('show_homepage', models.BooleanField(default=False, verbose_name='Show homepage on personal page')),
            ],
            options={
                'verbose_name': 'Alumnus',
                'verbose_name_plural': 'Alumni',
                'ordering': ('last_name', 'first_name'),
            },
            managers=[
                ('objects', apiweb.apps.alumni.managers.AlumniManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20, verbose_name='title')),
            ],
            options={
                'verbose_name': 'Academic Title',
                'verbose_name_plural': 'Academic Titles',
            },
        ),
        migrations.CreateModel(
            name='PositionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of position (e.g., director, faculty staff, postdoc, PhD student, ...)', max_length=80)),
                ('plural', models.CharField(blank=True, help_text="Full plural name, if this is not a simple appended 's'", max_length=80)),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Last Changed')),
            ],
            options={
                'verbose_name': 'Possible Type of Position at API',
                'verbose_name_plural': 'Possible Types of Position at API',
            },
        ),
        migrations.CreateModel(
            name='PreviousPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateField(blank=True, null=True, verbose_name='Starting date')),
                ('date_stop', models.DateField(blank=True, null=True, verbose_name='Date finished')),
                ('nova', models.CharField(blank=True, choices=[('NW1', 'Nova Network 1'), ('NW2', 'Nova Network 2'), ('NW3', 'Nova Network 3'), ('INS', 'Instrumentation')], max_length=3)),
                ('funding', models.PositiveSmallIntegerField(choices=[(0, 'Unknown'), (1, 'ASTRON'), (2, 'UvA'), (3, 'SRON'), (4, 'EC'), (5, 'NOVA'), (6, 'NWO'), (7, 'VU'), (8, 'KNAW'), (9, 'Other'), (10, 'UvA API'), (11, 'UvA GRAPPA')], default=0, verbose_name='Funding')),
                ('funding_note', models.CharField(blank=True, max_length=40, verbose_name='Funding Note')),
                ('funding_remark', models.CharField(blank=True, max_length=40, verbose_name='Funding Remark')),
                ('fte_per_year', jsonfield.fields.JSONField(blank=True, default=[], help_text='Enter mapping from year to fte in valid JSON syntax')),
                ('is_last', models.BooleanField(default=False, verbose_name='Last Position at API')),
                ('comments', models.TextField(blank=True, verbose_name='comments')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date Last Changed')),
                ('alumnus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prevpos_updated', to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alumnus_set', to='alumni.PositionType')),
            ],
            options={
                'verbose_name': 'Previous Position at API',
                'verbose_name_plural': 'Previous Position at API',
            },
        ),
        migrations.AddField(
            model_name='alumnus',
            name='academic_title',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='alumni.AcademicTitle'),
        ),
        migrations.AddField(
            model_name='alumnus',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='alumnus',
            name='position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_position', to='alumni.PositionType'),
        ),
        migrations.AddField(
            model_name='alumnus',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
